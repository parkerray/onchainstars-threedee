import {
  __commonJS,
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/isobject/index.js
var require_isobject = __commonJS({
  "node_modules/isobject/index.js"(exports, module) {
    "use strict";
    module.exports = function isObject(val) {
      return val != null && typeof val === "object" && Array.isArray(val) === false;
    };
  }
});

// node_modules/is-plain-object/index.js
var require_is_plain_object = __commonJS({
  "node_modules/is-plain-object/index.js"(exports, module) {
    "use strict";
    var isObject = require_isobject();
    function isObjectObject(o) {
      return isObject(o) === true && Object.prototype.toString.call(o) === "[object Object]";
    }
    module.exports = function isPlainObject(o) {
      var ctor, prot;
      if (isObjectObject(o) === false)
        return false;
      ctor = o.constructor;
      if (typeof ctor !== "function")
        return false;
      prot = ctor.prototype;
      if (isObjectObject(prot) === false)
        return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    };
  }
});

// node_modules/isarray/index.js
var require_isarray = __commonJS({
  "node_modules/isarray/index.js"(exports, module) {
    var toString = {}.toString;
    module.exports = Array.isArray || function(arr) {
      return toString.call(arr) == "[object Array]";
    };
  }
});

// node_modules/has-value/node_modules/isobject/index.js
var require_isobject2 = __commonJS({
  "node_modules/has-value/node_modules/isobject/index.js"(exports, module) {
    "use strict";
    var isArray = require_isarray();
    module.exports = function isObject(val) {
      return val != null && typeof val === "object" && isArray(val) === false;
    };
  }
});

// node_modules/has-values/index.js
var require_has_values = __commonJS({
  "node_modules/has-values/index.js"(exports, module) {
    "use strict";
    module.exports = function hasValue(o, noZero) {
      if (o === null || o === void 0) {
        return false;
      }
      if (typeof o === "boolean") {
        return true;
      }
      if (typeof o === "number") {
        if (o === 0 && noZero === true) {
          return false;
        }
        return true;
      }
      if (o.length !== void 0) {
        return o.length !== 0;
      }
      for (var key in o) {
        if (o.hasOwnProperty(key)) {
          return true;
        }
      }
      return false;
    };
  }
});

// node_modules/get-value/index.js
var require_get_value = __commonJS({
  "node_modules/get-value/index.js"(exports, module) {
    module.exports = function(obj, prop, a, b, c) {
      if (!isObject(obj) || !prop) {
        return obj;
      }
      prop = toString(prop);
      if (a)
        prop += "." + toString(a);
      if (b)
        prop += "." + toString(b);
      if (c)
        prop += "." + toString(c);
      if (prop in obj) {
        return obj[prop];
      }
      var segs = prop.split(".");
      var len = segs.length;
      var i = -1;
      while (obj && ++i < len) {
        var key = segs[i];
        while (key[key.length - 1] === "\\") {
          key = key.slice(0, -1) + "." + segs[++i];
        }
        obj = obj[key];
      }
      return obj;
    };
    function isObject(val) {
      return val !== null && (typeof val === "object" || typeof val === "function");
    }
    function toString(val) {
      if (!val)
        return "";
      if (Array.isArray(val)) {
        return val.join(".");
      }
      return val;
    }
  }
});

// node_modules/has-value/index.js
var require_has_value = __commonJS({
  "node_modules/has-value/index.js"(exports, module) {
    "use strict";
    var isObject = require_isobject2();
    var hasValues = require_has_values();
    var get = require_get_value();
    module.exports = function(obj, prop, noZero) {
      if (isObject(obj)) {
        return hasValues(get(obj, prop), noZero);
      }
      return hasValues(obj, prop);
    };
  }
});

// node_modules/unset-value/index.js
var require_unset_value = __commonJS({
  "node_modules/unset-value/index.js"(exports, module) {
    "use strict";
    var isObject = require_isobject();
    var has = require_has_value();
    module.exports = function unset(obj, prop) {
      if (!isObject(obj)) {
        throw new TypeError("expected an object.");
      }
      if (obj.hasOwnProperty(prop)) {
        delete obj[prop];
        return true;
      }
      if (has(obj, prop)) {
        var segs = prop.split(".");
        var last = segs.pop();
        while (segs.length && segs[segs.length - 1].slice(-1) === "\\") {
          last = segs.pop().slice(0, -1) + "." + last;
        }
        while (segs.length)
          obj = obj[prop = segs.shift()];
        return delete obj[last];
      }
      return true;
    };
  }
});

// node_modules/omit-deep/index.js
var require_omit_deep = __commonJS({
  "node_modules/omit-deep/index.js"(exports, module) {
    "use strict";
    var isObject = require_is_plain_object();
    var unset = require_unset_value();
    module.exports = function omitDeep2(value, keys) {
      if (typeof value === "undefined") {
        return {};
      }
      if (Array.isArray(value)) {
        for (var i = 0; i < value.length; i++) {
          value[i] = omitDeep2(value[i], keys);
        }
        return value;
      }
      if (!isObject(value)) {
        return value;
      }
      if (typeof keys === "string") {
        keys = [keys];
      }
      if (!Array.isArray(keys)) {
        return value;
      }
      for (var j = 0; j < keys.length; j++) {
        unset(value, keys[j]);
      }
      for (var key in value) {
        if (value.hasOwnProperty(key)) {
          value[key] = omitDeep2(value[key], keys);
        }
      }
      return value;
    };
  }
});

// node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "node_modules/is-buffer/index.js"(exports, module) {
    module.exports = function(obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
    }
  }
});

// node_modules/kind-of/index.js
var require_kind_of = __commonJS({
  "node_modules/kind-of/index.js"(exports, module) {
    var isBuffer = require_is_buffer();
    var toString = Object.prototype.toString;
    module.exports = function kindOf(val) {
      if (typeof val === "undefined") {
        return "undefined";
      }
      if (val === null) {
        return "null";
      }
      if (val === true || val === false || val instanceof Boolean) {
        return "boolean";
      }
      if (typeof val === "string" || val instanceof String) {
        return "string";
      }
      if (typeof val === "number" || val instanceof Number) {
        return "number";
      }
      if (typeof val === "function" || val instanceof Function) {
        return "function";
      }
      if (typeof Array.isArray !== "undefined" && Array.isArray(val)) {
        return "array";
      }
      if (val instanceof RegExp) {
        return "regexp";
      }
      if (val instanceof Date) {
        return "date";
      }
      var type = toString.call(val);
      if (type === "[object RegExp]") {
        return "regexp";
      }
      if (type === "[object Date]") {
        return "date";
      }
      if (type === "[object Arguments]") {
        return "arguments";
      }
      if (type === "[object Error]") {
        return "error";
      }
      if (isBuffer(val)) {
        return "buffer";
      }
      if (type === "[object Set]") {
        return "set";
      }
      if (type === "[object WeakSet]") {
        return "weakset";
      }
      if (type === "[object Map]") {
        return "map";
      }
      if (type === "[object WeakMap]") {
        return "weakmap";
      }
      if (type === "[object Symbol]") {
        return "symbol";
      }
      if (type === "[object Int8Array]") {
        return "int8array";
      }
      if (type === "[object Uint8Array]") {
        return "uint8array";
      }
      if (type === "[object Uint8ClampedArray]") {
        return "uint8clampedarray";
      }
      if (type === "[object Int16Array]") {
        return "int16array";
      }
      if (type === "[object Uint16Array]") {
        return "uint16array";
      }
      if (type === "[object Int32Array]") {
        return "int32array";
      }
      if (type === "[object Uint32Array]") {
        return "uint32array";
      }
      if (type === "[object Float32Array]") {
        return "float32array";
      }
      if (type === "[object Float64Array]") {
        return "float64array";
      }
      return "object";
    };
  }
});

// node_modules/rename-keys/index.js
var require_rename_keys = __commonJS({
  "node_modules/rename-keys/index.js"(exports, module) {
    (function() {
      "use strict";
      function rename2(obj, fn) {
        if (typeof fn !== "function") {
          return obj;
        }
        var res = {};
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            res[fn(key, obj[key]) || key] = obj[key];
          }
        }
        return res;
      }
      if (typeof module !== "undefined" && module.exports) {
        module.exports = rename2;
      } else {
        if (typeof define === "function" && define.amd) {
          define([], function() {
            return rename2;
          });
        } else {
          window.rename = rename2;
        }
      }
    })();
  }
});

// node_modules/deep-rename-keys/index.js
var require_deep_rename_keys = __commonJS({
  "node_modules/deep-rename-keys/index.js"(exports, module) {
    "use strict";
    var typeOf = require_kind_of();
    var rename2 = require_rename_keys();
    module.exports = function renameDeep(obj, cb) {
      var type = typeOf(obj);
      if (type !== "object" && type !== "array") {
        throw new Error("expected an object");
      }
      var res = [];
      if (type === "object") {
        obj = rename2(obj, cb);
        res = {};
      }
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          var val = obj[key];
          if (typeOf(val) === "object" || typeOf(val) === "array") {
            res[key] = renameDeep(val, cb);
          } else {
            res[key] = val;
          }
        }
      }
      return res;
    };
  }
});

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events = this._events) {
        if (has.call(events, name))
          names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter.prototype.listeners = function listeners(event, exists) {
      var evt = prefix ? prefix + event : event, available = this._events[evt];
      if (exists)
        return !!available;
      if (!available)
        return [];
      if (available.fn)
        return [available.fn];
      for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
        ee[i] = available[i].fn;
      }
      return ee;
    };
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event, fn, context) {
      var listener = new EE(fn, context || this), evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        this._events[evt] = listener, this._eventsCount++;
      else if (!this._events[evt].fn)
        this._events[evt].push(listener);
      else
        this._events[evt] = [this._events[evt], listener];
      return this;
    };
    EventEmitter.prototype.once = function once(event, fn, context) {
      var listener = new EE(fn, context || this, true), evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        this._events[evt] = listener, this._eventsCount++;
      else if (!this._events[evt].fn)
        this._events[evt].push(listener);
      else
        this._events[evt] = [this._events[evt], listener];
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        if (--this._eventsCount === 0)
          this._events = new Events();
        else
          delete this._events[evt];
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          if (--this._eventsCount === 0)
            this._events = new Events();
          else
            delete this._events[evt];
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else if (--this._eventsCount === 0)
          this._events = new Events();
        else
          delete this._events[evt];
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) {
          if (--this._eventsCount === 0)
            this._events = new Events();
          else
            delete this._events[evt];
        }
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
      return this;
    };
    EventEmitter.prefixed = prefix;
    EventEmitter.EventEmitter = EventEmitter;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter;
    }
  }
});

// node_modules/xml-lexer/dist/lexer.js
var require_lexer = __commonJS({
  "node_modules/xml-lexer/dist/lexer.js"(exports, module) {
    "use strict";
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var EventEmitter = require_eventemitter3();
    var noop = function noop2() {
    };
    var State = {
      data: "state-data",
      cdata: "state-cdata",
      tagBegin: "state-tag-begin",
      tagName: "state-tag-name",
      tagEnd: "state-tag-end",
      attributeNameStart: "state-attribute-name-start",
      attributeName: "state-attribute-name",
      attributeNameEnd: "state-attribute-name-end",
      attributeValueBegin: "state-attribute-value-begin",
      attributeValue: "state-attribute-value"
    };
    var Action = {
      lt: "action-lt",
      gt: "action-gt",
      space: "action-space",
      equal: "action-equal",
      quote: "action-quote",
      slash: "action-slash",
      char: "action-char",
      error: "action-error"
    };
    var Type = {
      text: "text",
      openTag: "open-tag",
      closeTag: "close-tag",
      attributeName: "attribute-name",
      attributeValue: "attribute-value"
    };
    var charToAction = {
      " ": Action.space,
      "	": Action.space,
      "\n": Action.space,
      "\r": Action.space,
      "<": Action.lt,
      ">": Action.gt,
      '"': Action.quote,
      "'": Action.quote,
      "=": Action.equal,
      "/": Action.slash
    };
    var getAction = function getAction2(char) {
      return charToAction[char] || Action.char;
    };
    var create = function create2(options) {
      var _State$data, _State$tagBegin, _State$tagName, _State$tagEnd, _State$attributeNameS, _State$attributeName, _State$attributeNameE, _State$attributeValue, _State$attributeValue2, _lexer$stateMachine;
      options = Object.assign({ debug: false }, options);
      var lexer = new EventEmitter();
      var state = State.data;
      var data = "";
      var tagName = "";
      var attrName = "";
      var attrValue = "";
      var isClosing = "";
      var openingQuote = "";
      var emit = function emit2(type, value) {
        if (tagName[0] === "?" || tagName[0] === "!") {
          return;
        }
        var event = { type, value };
        if (options.debug) {
          console.log("emit:", event);
        }
        lexer.emit("data", event);
      };
      lexer.stateMachine = (_lexer$stateMachine = {}, _defineProperty(_lexer$stateMachine, State.data, (_State$data = {}, _defineProperty(_State$data, Action.lt, function() {
        if (data.trim()) {
          emit(Type.text, data);
        }
        tagName = "";
        isClosing = false;
        state = State.tagBegin;
      }), _defineProperty(_State$data, Action.char, function(char) {
        data += char;
      }), _State$data)), _defineProperty(_lexer$stateMachine, State.cdata, _defineProperty({}, Action.char, function(char) {
        data += char;
        if (data.substr(-3) === "]]>") {
          emit(Type.text, data.slice(0, -3));
          data = "";
          state = State.data;
        }
      })), _defineProperty(_lexer$stateMachine, State.tagBegin, (_State$tagBegin = {}, _defineProperty(_State$tagBegin, Action.space, noop), _defineProperty(_State$tagBegin, Action.char, function(char) {
        tagName = char;
        state = State.tagName;
      }), _defineProperty(_State$tagBegin, Action.slash, function() {
        tagName = "";
        isClosing = true;
      }), _State$tagBegin)), _defineProperty(_lexer$stateMachine, State.tagName, (_State$tagName = {}, _defineProperty(_State$tagName, Action.space, function() {
        if (isClosing) {
          state = State.tagEnd;
        } else {
          state = State.attributeNameStart;
          emit(Type.openTag, tagName);
        }
      }), _defineProperty(_State$tagName, Action.gt, function() {
        if (isClosing) {
          emit(Type.closeTag, tagName);
        } else {
          emit(Type.openTag, tagName);
        }
        data = "";
        state = State.data;
      }), _defineProperty(_State$tagName, Action.slash, function() {
        state = State.tagEnd;
        emit(Type.openTag, tagName);
      }), _defineProperty(_State$tagName, Action.char, function(char) {
        tagName += char;
        if (tagName === "![CDATA[") {
          state = State.cdata;
          data = "";
          tagName = "";
        }
      }), _State$tagName)), _defineProperty(_lexer$stateMachine, State.tagEnd, (_State$tagEnd = {}, _defineProperty(_State$tagEnd, Action.gt, function() {
        emit(Type.closeTag, tagName);
        data = "";
        state = State.data;
      }), _defineProperty(_State$tagEnd, Action.char, noop), _State$tagEnd)), _defineProperty(_lexer$stateMachine, State.attributeNameStart, (_State$attributeNameS = {}, _defineProperty(_State$attributeNameS, Action.char, function(char) {
        attrName = char;
        state = State.attributeName;
      }), _defineProperty(_State$attributeNameS, Action.gt, function() {
        data = "";
        state = State.data;
      }), _defineProperty(_State$attributeNameS, Action.space, noop), _defineProperty(_State$attributeNameS, Action.slash, function() {
        isClosing = true;
        state = State.tagEnd;
      }), _State$attributeNameS)), _defineProperty(_lexer$stateMachine, State.attributeName, (_State$attributeName = {}, _defineProperty(_State$attributeName, Action.space, function() {
        state = State.attributeNameEnd;
      }), _defineProperty(_State$attributeName, Action.equal, function() {
        emit(Type.attributeName, attrName);
        state = State.attributeValueBegin;
      }), _defineProperty(_State$attributeName, Action.gt, function() {
        attrValue = "";
        emit(Type.attributeName, attrName);
        emit(Type.attributeValue, attrValue);
        data = "";
        state = State.data;
      }), _defineProperty(_State$attributeName, Action.slash, function() {
        isClosing = true;
        attrValue = "";
        emit(Type.attributeName, attrName);
        emit(Type.attributeValue, attrValue);
        state = State.tagEnd;
      }), _defineProperty(_State$attributeName, Action.char, function(char) {
        attrName += char;
      }), _State$attributeName)), _defineProperty(_lexer$stateMachine, State.attributeNameEnd, (_State$attributeNameE = {}, _defineProperty(_State$attributeNameE, Action.space, noop), _defineProperty(_State$attributeNameE, Action.equal, function() {
        emit(Type.attributeName, attrName);
        state = State.attributeValueBegin;
      }), _defineProperty(_State$attributeNameE, Action.gt, function() {
        attrValue = "";
        emit(Type.attributeName, attrName);
        emit(Type.attributeValue, attrValue);
        data = "";
        state = State.data;
      }), _defineProperty(_State$attributeNameE, Action.char, function(char) {
        attrValue = "";
        emit(Type.attributeName, attrName);
        emit(Type.attributeValue, attrValue);
        attrName = char;
        state = State.attributeName;
      }), _State$attributeNameE)), _defineProperty(_lexer$stateMachine, State.attributeValueBegin, (_State$attributeValue = {}, _defineProperty(_State$attributeValue, Action.space, noop), _defineProperty(_State$attributeValue, Action.quote, function(char) {
        openingQuote = char;
        attrValue = "";
        state = State.attributeValue;
      }), _defineProperty(_State$attributeValue, Action.gt, function() {
        attrValue = "";
        emit(Type.attributeValue, attrValue);
        data = "";
        state = State.data;
      }), _defineProperty(_State$attributeValue, Action.char, function(char) {
        openingQuote = "";
        attrValue = char;
        state = State.attributeValue;
      }), _State$attributeValue)), _defineProperty(_lexer$stateMachine, State.attributeValue, (_State$attributeValue2 = {}, _defineProperty(_State$attributeValue2, Action.space, function(char) {
        if (openingQuote) {
          attrValue += char;
        } else {
          emit(Type.attributeValue, attrValue);
          state = State.attributeNameStart;
        }
      }), _defineProperty(_State$attributeValue2, Action.quote, function(char) {
        if (openingQuote === char) {
          emit(Type.attributeValue, attrValue);
          state = State.attributeNameStart;
        } else {
          attrValue += char;
        }
      }), _defineProperty(_State$attributeValue2, Action.gt, function(char) {
        if (openingQuote) {
          attrValue += char;
        } else {
          emit(Type.attributeValue, attrValue);
          data = "";
          state = State.data;
        }
      }), _defineProperty(_State$attributeValue2, Action.slash, function(char) {
        if (openingQuote) {
          attrValue += char;
        } else {
          emit(Type.attributeValue, attrValue);
          isClosing = true;
          state = State.tagEnd;
        }
      }), _defineProperty(_State$attributeValue2, Action.char, function(char) {
        attrValue += char;
      }), _State$attributeValue2)), _lexer$stateMachine);
      var step = function step2(char) {
        if (options.debug) {
          console.log(state, char);
        }
        var actions = lexer.stateMachine[state];
        var action = actions[getAction(char)] || actions[Action.error] || actions[Action.char];
        action(char);
      };
      lexer.write = function(str) {
        var len = str.length;
        for (var i = 0; i < len; i++) {
          step(str[i]);
        }
      };
      return lexer;
    };
    module.exports = {
      State,
      Action,
      Type,
      create
    };
  }
});

// node_modules/xml-reader/dist/reader.js
var require_reader = __commonJS({
  "node_modules/xml-reader/dist/reader.js"(exports, module) {
    "use strict";
    var EventEmitter = require_eventemitter3();
    var Lexer = require_lexer();
    var Type = Lexer.Type;
    var NodeType = {
      element: "element",
      text: "text"
    };
    var createNode = function createNode2(params) {
      return Object.assign({
        name: "",
        type: NodeType.element,
        value: "",
        parent: null,
        attributes: {},
        children: []
      }, params);
    };
    var create = function create2(options) {
      options = Object.assign({
        stream: false,
        parentNodes: true,
        doneEvent: "done",
        tagPrefix: "tag:",
        emitTopLevelOnly: false,
        debug: false
      }, options);
      var lexer = void 0, rootNode = void 0, current = void 0, attrName = void 0;
      var reader = new EventEmitter();
      var handleLexerData = function handleLexerData2(data) {
        switch (data.type) {
          case Type.openTag:
            if (current === null) {
              current = rootNode;
              current.name = data.value;
            } else {
              var node = createNode({
                name: data.value,
                parent: current
              });
              current.children.push(node);
              current = node;
            }
            break;
          case Type.closeTag:
            var parent = current.parent;
            if (!options.parentNodes) {
              current.parent = null;
            }
            if (current.name !== data.value) {
              break;
            }
            if (options.stream && parent === rootNode) {
              rootNode.children = [];
              current.parent = null;
            }
            if (!options.emitTopLevelOnly || parent === rootNode) {
              reader.emit(options.tagPrefix + current.name, current);
              reader.emit("tag", current.name, current);
            }
            if (current === rootNode) {
              lexer.removeAllListeners("data");
              reader.emit(options.doneEvent, current);
              rootNode = null;
            }
            current = parent;
            break;
          case Type.text:
            if (current) {
              current.children.push(createNode({
                type: NodeType.text,
                value: data.value,
                parent: options.parentNodes ? current : null
              }));
            }
            break;
          case Type.attributeName:
            attrName = data.value;
            current.attributes[attrName] = "";
            break;
          case Type.attributeValue:
            current.attributes[attrName] = data.value;
            break;
        }
      };
      reader.reset = function() {
        lexer = Lexer.create({ debug: options.debug });
        lexer.on("data", handleLexerData);
        rootNode = createNode();
        current = null;
        attrName = "";
        reader.parse = lexer.write;
      };
      reader.reset();
      return reader;
    };
    var parseSync2 = function parseSync3(xml, options) {
      options = Object.assign({}, options, { stream: false, tagPrefix: ":" });
      var reader = create(options);
      var res = void 0;
      reader.on("done", function(ast) {
        res = ast;
      });
      reader.parse(xml);
      return res;
    };
    module.exports = {
      parseSync: parseSync2,
      create,
      NodeType
    };
  }
});

// node_modules/svgson/dist/svgson.esm.js
var import_omit_deep = __toESM(require_omit_deep());
var import_deep_rename_keys = __toESM(require_deep_rename_keys());
var import_xml_reader = __toESM(require_reader());
var parseInput = function parseInput2(input) {
  var parsed = (0, import_xml_reader.parseSync)("<root>".concat(input, "</root>"), {
    parentNodes: false
  });
  var isValid = parsed.children && parsed.children.length > 0 && parsed.children.every(function(node) {
    return node.name === "svg";
  });
  if (isValid) {
    return parsed.children.length === 1 ? parsed.children[0] : parsed.children;
  } else {
    throw Error("nothing to parse");
  }
};
var removeAttrs = function removeAttrs2(obj) {
  return (0, import_omit_deep.default)(obj, ["parent"]);
};
var camelize = function camelize2(node) {
  return (0, import_deep_rename_keys.default)(node, function(key) {
    if (!notCamelcase(key)) {
      return toCamelCase(key);
    }
    return key;
  });
};
var toCamelCase = function toCamelCase2(prop) {
  return prop.replace(/[-|:]([a-z])/gi, function(all, letter) {
    return letter.toUpperCase();
  });
};
var notCamelcase = function notCamelcase2(prop) {
  return /^(data|aria)(-\w+)/.test(prop);
};
var escapeText = function escapeText2(text) {
  if (text) {
    var str = String(text);
    return /[&<>]/.test(str) ? "<![CDATA[".concat(str.replace(/]]>/, "]]]]><![CDATA[>"), "]]>") : str;
  }
  return "";
};
var escapeAttr = function escapeAttr2(attr) {
  return String(attr).replace(/&/g, "&amp;").replace(/'/g, "&apos;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
};
var svgsonSync = function svgsonSync2(input) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$transformNode = _ref.transformNode, transformNode = _ref$transformNode === void 0 ? function(node) {
    return node;
  } : _ref$transformNode, _ref$camelcase = _ref.camelcase, camelcase = _ref$camelcase === void 0 ? false : _ref$camelcase;
  var applyFilters = function applyFilters2(input2) {
    var n;
    n = removeAttrs(input2);
    n = transformNode(n);
    if (camelcase) {
      n = camelize(n);
    }
    return n;
  };
  return applyFilters(parseInput(input));
};
function svgson() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return new Promise(function(resolve, reject) {
    try {
      var res = svgsonSync.apply(void 0, args);
      resolve(res);
    } catch (e) {
      reject(e);
    }
  });
}
var stringify = function stringify2(_ast) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$transformAttr = _ref.transformAttr, transformAttr = _ref$transformAttr === void 0 ? function(key, value, escape) {
    return "".concat(key, '="').concat(escape(value), '"');
  } : _ref$transformAttr, _ref$transformNode = _ref.transformNode, transformNode = _ref$transformNode === void 0 ? function(node) {
    return node;
  } : _ref$transformNode, _ref$selfClose = _ref.selfClose, selfClose = _ref$selfClose === void 0 ? true : _ref$selfClose;
  if (Array.isArray(_ast)) {
    return _ast.map(function(ast2) {
      return stringify2(ast2, {
        transformAttr,
        selfClose,
        transformNode
      });
    }).join("");
  }
  var ast = transformNode(_ast);
  if (ast.type === "text") {
    return escapeText(ast.value);
  }
  var attributes = "";
  for (var attr in ast.attributes) {
    var attrStr = transformAttr(attr, ast.attributes[attr], escapeAttr, ast.name);
    attributes += attrStr ? " ".concat(attrStr) : "";
  }
  return ast.children && ast.children.length > 0 || !selfClose ? "<".concat(ast.name).concat(attributes, ">").concat(stringify2(ast.children, {
    transformAttr,
    transformNode,
    selfClose
  }), "</").concat(ast.name, ">") : "<".concat(ast.name).concat(attributes, "/>");
};
var svgson_esm_default = svgson;
export {
  svgson_esm_default as default,
  svgson as parse,
  svgsonSync as parseSync,
  stringify
};
/*! Bundled license information:

isobject/index.js:
  (*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-plain-object/index.js:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

isobject/index.js:
  (*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2015, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

has-values/index.js:
  (*!
   * has-values <https://github.com/jonschlinkert/has-values>
   *
   * Copyright (c) 2014-2015, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

get-value/index.js:
  (*!
   * get-value <https://github.com/jonschlinkert/get-value>
   *
   * Copyright (c) 2014-2015, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

has-value/index.js:
  (*!
   * has-value <https://github.com/jonschlinkert/has-value>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

unset-value/index.js:
  (*!
   * unset-value <https://github.com/jonschlinkert/unset-value>
   *
   * Copyright (c) 2015, 2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

deep-rename-keys/index.js:
  (*!
   * deep-rename-keys <https://github.com/jonschlinkert/deep-rename-keys>
   *
   * Copyright (c) 2015 Jon Schlinkert, contributors.
   * Licensed under the MIT license.
   *)
*/
//# sourceMappingURL=svgson.js.map
